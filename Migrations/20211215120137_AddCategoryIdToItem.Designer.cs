// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy.Data;

namespace Pharmacy.Migrations
{
    [DbContext(typeof(PharmacyContext))]
    [Migration("20211215120137_AddCategoryIdToItem")]
    partial class AddCategoryIdToItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pharmacy.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandPic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BrandSort")
                        .HasColumnType("int");

                    b.Property<string>("BrandTlAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BrandTlEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Pharmacy.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("QTY")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Pharmacy.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryPic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CategorySort")
                        .HasColumnType("int");

                    b.Property<string>("CategoryTlAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryTlEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Pharmacy.Models.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollectionSort")
                        .HasColumnType("int");

                    b.Property<string>("CollectionTlAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CollectionTlEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CollectionId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Pharmacy.Models.CollectionItem", b =>
                {
                    b.Property<int>("CollectionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CollectionItemId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ItemId");

                    b.ToTable("CollectionItems");
                });

            modelBuilder.Entity("Pharmacy.Models.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("AboutContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaqcontentAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FAQContentAr");

                    b.Property<string>("FaqcontentEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FAQContentEn");

                    b.Property<string>("PrivacyContent1En")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivacyContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Pharmacy.Models.ContactUs", b =>
                {
                    b.Property<int>("ContactUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactUsId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Pharmacy.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerImage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerNameAr")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CustomerNameEn")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerRemarks")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Pharmacy.Models.CustomerFav", b =>
                {
                    b.Property<int>("CustomerFavId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CustomerFavId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerFav");
                });

            modelBuilder.Entity("Pharmacy.Models.HomeSlider", b =>
                {
                    b.Property<int>("HomeSliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HomeSliderEntityId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomeSliderPic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HomeSliderTypeId")
                        .HasColumnType("int");

                    b.HasKey("HomeSliderId");

                    b.HasIndex("HomeSliderTypeId");

                    b.ToTable("HomeSliders");
                });

            modelBuilder.Entity("Pharmacy.Models.HomeSliderType", b =>
                {
                    b.Property<int>("HomeSliderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HomeSliderTypeTlAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomeSliderTypeTlEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HomeSliderTypeId");

                    b.ToTable("HomeSliderTypes");
                });

            modelBuilder.Entity("Pharmacy.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemTlAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemTlEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Pharmacy.Models.ItemImage", b =>
                {
                    b.Property<int>("ItemImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("ItemImageId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("Pharmacy.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addrerss")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("Closed")
                        .HasColumnType("bit");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Pharmacy.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double?>("ItemPrice")
                        .HasColumnType("float");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("QTY");

                    b.Property<string>("Remakrs")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Pharmacy.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentMethodTlAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethodTlEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Pharmacy.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SectionPic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SectionSort")
                        .HasColumnType("int");

                    b.Property<string>("SectionTlAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SectionTlEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Pharmacy.Models.Cart", b =>
                {
                    b.HasOne("Pharmacy.Models.Customer", "Customer")
                        .WithMany("Cart")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Pharmacy.Models.Item", "Item")
                        .WithMany("Cart")
                        .HasForeignKey("ItemId");

                    b.Navigation("Customer");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pharmacy.Models.Category", b =>
                {
                    b.HasOne("Pharmacy.Models.Section", "Section")
                        .WithMany("Category")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Category_Section")
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Pharmacy.Models.CollectionItem", b =>
                {
                    b.HasOne("Pharmacy.Models.Collection", "Collection")
                        .WithMany("CollectionItem")
                        .HasForeignKey("CollectionId")
                        .HasConstraintName("FK_CollectionItem_Collection")
                        .IsRequired();

                    b.HasOne("Pharmacy.Models.Item", "Item")
                        .WithMany("CollectionItem")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_CollectionItem_Item")
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pharmacy.Models.CustomerFav", b =>
                {
                    b.HasOne("Pharmacy.Models.Customer", "Customer")
                        .WithMany("CustomerFav")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerFav_Customer")
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Pharmacy.Models.HomeSlider", b =>
                {
                    b.HasOne("Pharmacy.Models.HomeSliderType", "HomeSliderType")
                        .WithMany("HomeSlider")
                        .HasForeignKey("HomeSliderTypeId")
                        .HasConstraintName("FK_HomeSlider_HomeSliderType");

                    b.Navigation("HomeSliderType");
                });

            modelBuilder.Entity("Pharmacy.Models.Item", b =>
                {
                    b.HasOne("Pharmacy.Models.Brand", "Brand")
                        .WithMany("Item")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Item_Brand");

                    b.HasOne("Pharmacy.Models.Category", "Category")
                        .WithMany("Item")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pharmacy.Models.ItemImage", b =>
                {
                    b.HasOne("Pharmacy.Models.Item", "Item")
                        .WithMany("ItemImage")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemImage_Item")
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pharmacy.Models.Order", b =>
                {
                    b.HasOne("Pharmacy.Models.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Pharmacy.Models.OrderItem", b =>
                {
                    b.HasOne("Pharmacy.Models.Item", "Item")
                        .WithMany("OrderItem")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OrderItem_Item")
                        .IsRequired();

                    b.HasOne("Pharmacy.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_Order");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Pharmacy.Models.Brand", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pharmacy.Models.Category", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pharmacy.Models.Collection", b =>
                {
                    b.Navigation("CollectionItem");
                });

            modelBuilder.Entity("Pharmacy.Models.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("CustomerFav");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Pharmacy.Models.HomeSliderType", b =>
                {
                    b.Navigation("HomeSlider");
                });

            modelBuilder.Entity("Pharmacy.Models.Item", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("CollectionItem");

                    b.Navigation("ItemImage");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Pharmacy.Models.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Pharmacy.Models.Section", b =>
                {
                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
